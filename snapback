#!/bin/bash

export TARGETBASE=~/.Snapshots
#
# Number of hourly snaps:
export hsnaps=23
#Number of days to keep snaps:
export dsnaps=7
#Number of weeks to keep snaps:
export wsnaps=4
#Number of months to keep snaps:
export msnaps=12

function recover {
	RECFROM=$TARGETBASE/$1 
	if [ ! -d $RECFROM ]; then
		echo "Critical: directory $RECFROM doesn't exist" 1>&2 ; exit 1
	fi
	for SOURCE in $DIRS; do
		rsync -av $RSYNCPARAMS $RECFROM/$SOURCE/. /$SOURCE/.
	done
}


function undel {
	RECFROM=$TARGETBASE/$1 
	if [ ! -d $RECFROM ]; then
		echo "Critical: directory $RECFROM doesn't exist" 1>&2 ; exit 1
	fi
	for SOURCE in $DIRS; do
		rsync -av $RSYNCPARAMS --ignore-existing $RECFROM/$SOURCE/. /$SOURCE/.
	done
}

function tag {
	TAGFROM=$TARGETBASE/$1 
	TAGTO=$TARGETBASE/$2 
	if [ ! -d $TAGFROM ]; then
		echo "Critical: directory $TAGFROM doesn't exist" 1>&2 ; exit 1
	fi
	if [ -d $TAGTO ]; then
		echo "Critical: directory $TAGTO already exist" 1>&2 ; exit 1
	fi
	cp -al $TAGFROM $TAGTO
}

function hourly {
	if [ -d $TARGETBASE/hour-$hsnaps] ; then rm -rf $TARGETBASE/hour-$hsnaps; fi
	for i in `seq 2 $hsnaps | tac`;do
		(( next = i - 1 ))
		mv $TARGETBASE/hour-$next $TARGETBASE/hour-$i
	done
	cp -al $TARGETBASE/hour-0 $TARGETBASE/hour-1
	for SOURCE in $DIRS; do
		mkdir -p $TARGETBASE/hour-0/$SOURCE;
		rsync -av --delete $RSYNC_PARAMS $RSYNCPARAMS $SOURCE/. $TARGETBASE/hour-0/$SOURCE/.
	done

}

function daily {
	if [ -d $TARGETBASE/day-$dsnaps ]; then rm -rf $TARGETBASE/day-$dsnaps; fi
	for i in `seq 1 $dsnaps | tac`;do
		(( next = i - 1 ))
		mv $TARGETBASE/day-$next $TARGETBASE/day-$i
	done

	cp -al $TARGETBASE/hour-$hsnaps $TARGETBASE/day-0
}

function weekly {
	if [ -d $TARGETBASE/week-$wsnaps ]; then rm -rf $TARGETBASE/week-$wsnaps; fi
	for i in `seq 1 $wsnaps | tac`;do
		(( next = i - 1 ))
		mv $TARGETBASE/week-$next $TARGETBASE/week-$i
	done
	#mv $TARGETBASE/day-$dsnaps $TARGETBASE/week-0
	cp -al $TARGETBASE/day-$dsnaps $TARGETBASE/week-0
}

function monthly {
	if [ -d  $TARGETBASE/month-$msnaps ]; then rm -rf $TARGETBASE/month-$msnaps; fi
	for i in `seq 1 $msnaps | tac`;do
		(( next = i - 1 ))
		mv $TARGETBASE/month-$next $TARGETBASE/month-$i
	done
	#mv $TARGETBASE/week-$wsnaps $TARGETBASE/month-0
	cp -al $TARGETBASE/week-$wsnaps $TARGETBASE/month-0
}


function printusage {
	DIRS=~/Documents;
	TARGETBASE=~/.Snapshots;
	echo "$0"
	echo "Usage:"
	echo 
	echo $0
	echo "$0 --undel <snapdir> # i.e. hour-1"
	echo "$0 --tag <snapdir> <tag># i.e. hour-1 last-working"
	echo $0 --init
	echo $0 --hourly
	echo $0 --daily
	echo $0 --weekly
	echo $0 "--help|-h"
	echo $0 "--sampleconfig"
	echo
	echo "Crontab"
	echo '# m h dom mon dow command'
	echo '0 * * * * ' $0 --hourly '>/dev/null 2>&1'
	echo '58 23 * * * ' $0 --daily '>/dev/null 2>&1'
	echo '56 22 * * 1 ' $0 --weekly '>/dev/null 2>&1'
	echo '0 1 1 * * ' $0 --monthly '>/dev/null 2>&1'
	echo
	echo
	echo $0 "--help|-h"
	echo $0 "--sampleconfig"
	echo
}

function sampleconfig {
	echo "# cat ~/.snapshotrc"
	echo "DIRS='$DIRS'"
	echo "TARGETBASE='$TARGETBASE'"
	echo "RSYNC_PARAMS='--max-size=1.5m'"
}


SNAPSHOTRC=${SNAPSHOTRC:-~/.snapshotrc}
if [ -f $SNAPSHOTRC ]; then
	source $SNAPSHOTRC
else
	printusage ;
	exit 1;
fi

if [ $# -eq 0 ] ; then
	echo "Usage: snapback {--tag|--help|--undel|--init|--hourly|--daily|--weekly|--monthly}"
	exit 0
fi
while [ $# -gt 0 ];  do # {
case $1 in
	--conf) 
	source $2
	;;
	--dry-run)
	RSYNCPARAMS="--dry-run";
	;;
	--delete)
	SOURCE=$2
	if [ -d "$TARGETBASE/hour-0/$SOURCE" ] ; then 
		rm -rf $TARGETBASE/hour-0/$SOURCE;
	else
		echo "ERROR: could not find path $TARGETBASE/hour-0/$SOURCE";
		exit 1;
	fi
	;;
	--init)
	for mydir in `seq 0 $hsnaps`;do  mkdir -p $TARGETBASE/hour-$mydir;done
	for mydir in `seq 0 $dsnaps`;do  mkdir -p $TARGETBASE/day-$mydir;done
	for mydir in `seq 0 $wsnaps`;do  mkdir -p $TARGETBASE/week-$mydir;done
	for mydir in `seq 0 $msnaps`;do  mkdir -p $TARGETBASE/month-$mydir;done
	;;	
	--hourly)
	hourly ;
	;;
	--daily)
	daily ;
	;;
	--weekly)
	weekly ;
	;;
	--monthly)
	monthly ;
	;;
	--recover)
	recover $2 ;
	shift
	;;
	--undel)
	undel $2 ;
	shift
	;;
	--tag)
	tag $2 $3 ;
	shift; shift;
	;;
	--sampleconfig|-s)
	sampleconfig
	;;
	--help|-h)
	printusage
	;;
	*)
	printusage
	;;
esac
shift  # @ARGV
done # } end while
