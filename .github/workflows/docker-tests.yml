name: Container Tests

on:
  push:
    branches: [ main, master, feat_python ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  # Quick test job - runs on every push
  quick-test:
    name: Quick Container Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: test
          tags: snapback:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Run unit tests
        run: docker run --rm snapback:test

      - name: Check image size
        run: |
          SIZE=$(docker images snapback:test --format "{{.Size}}")
          echo "Image size: $SIZE"
          # Ensure image is under 500MB
          docker images snapback:test --format "{{.Size}}" | grep -E "[0-9]+(MB|GB)"

  # Matrix test job - runs on main branch and PRs
  matrix-test:
    name: Python ${{ matrix.python-version }} Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'pull_request'

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image for Python ${{ matrix.python-version }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: test
          build-args: |
            PYTHON_VERSION=${{ matrix.python-version }}
          tags: snapback:test-py${{ matrix.python-version }}
          cache-from: type=gha,scope=py${{ matrix.python-version }}
          cache-to: type=gha,mode=max,scope=py${{ matrix.python-version }}
          load: true

      - name: Run tests with coverage
        run: |
          docker run --rm \
            snapback:test-py${{ matrix.python-version }} \
            uv run pytest tests/ --cov=src/snapback --cov-report=xml --cov-report=term

      - name: Run extreme scenarios (subset)
        run: |
          docker run --rm \
            -e HIGH_FILE_COUNT=1000 \
            -e LARGE_FILE_SIZE=100M \
            -e DEEP_NESTING_LEVELS=30 \
            snapback:test-py${{ matrix.python-version }} \
            /app/docker/test-scenarios.sh
        continue-on-error: true

  # Full extreme test job - runs only on main branch
  extreme-test:
    name: Extreme Scenario Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: test
          tags: snapback:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Generate test data
        run: |
          docker run --rm \
            -v snapback-test-data:/home/snapback/test_data \
            snapback:test \
            /app/docker/generate-test-data.sh

      - name: Run extreme test scenarios
        run: |
          docker run --rm \
            -v snapback-test-data:/home/snapback/test_data \
            -v snapback-snapshots:/home/snapback/.Snapshots \
            -e VERBOSE=1 \
            -e HIGH_FILE_COUNT=50000 \
            -e LARGE_FILE_SIZE=1G \
            snapback:test \
            /app/docker/test-scenarios.sh
        timeout-minutes: 120

      - name: Cleanup volumes
        if: always()
        run: |
          docker volume rm snapback-test-data snapback-snapshots || true

  # Performance benchmark job
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: test
          tags: snapback:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Run performance benchmarks
        run: |
          echo "=== Running performance benchmarks ==="
          docker run --rm snapback:test bash -c "time pytest tests/ -v"

      - name: Measure space efficiency
        run: |
          echo "=== Measuring space efficiency ==="
          docker run --rm \
            -v bench-data:/home/snapback/test_data \
            -v bench-snapshots:/home/snapback/.Snapshots \
            snapback:test \
            bash -c "
              /app/docker/generate-test-data.sh &&
              echo 'Source size:' &&
              du -sh /home/snapback/test_data &&
              snapback --init &&
              snapback --hourly &&
              snapback --hourly &&
              snapback --hourly &&
              echo 'Snapshot size (3 hourly):' &&
              du -sh /home/snapback/.Snapshots &&
              echo 'Hard link verification:' &&
              find /home/snapback/.Snapshots -type f -links +1 | wc -l
            "

      - name: Cleanup benchmark volumes
        if: always()
        run: |
          docker volume rm bench-data bench-snapshots || true

  # Security scan job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build test image
        run: docker build -t snapback:test -f Dockerfile --target test .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'snapback:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        if: always()

  # Build and verify job
  build-verify:
    name: Build Verification
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify Dockerfile exists
        run: test -f Dockerfile

      - name: Verify .dockerignore exists
        run: test -f .dockerignore

      - name: Verify docker scripts exist
        run: |
          test -f docker/generate-test-data.sh
          test -f docker/test-scenarios.sh
          test -f docker/docker-compose.yml

      - name: Verify DOCKER_TESTING.md exists
        run: test -f DOCKER_TESTING.md

      - name: Build all targets
        run: |
          docker build -t snapback:base -f Dockerfile --target base .
          docker build -t snapback:build -f Dockerfile --target build .
          docker build -t snapback:test -f Dockerfile --target test .
          docker build -t snapback:runtime -f Dockerfile --target runtime .

      - name: Verify image layers
        run: |
          echo "=== Base image ==="
          docker history snapback:base --no-trunc
          echo ""
          echo "=== Runtime image ==="
          docker history snapback:runtime --no-trunc

      - name: Test CLI in runtime image
        run: docker run --rm snapback:runtime snapback --help
